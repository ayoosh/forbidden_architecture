ADD R0 R0 R0 ;
LLW R2 0x0000 ;
LLW R3 0x0000 ;
LHW R3 0x0060 ;
LLW R4 0x01DF ;
LLW R5 0x027F ;
LLW R6 0x0001 ;
LLW R7 0x0001 ;
LLW R14 0x0280 ;
LLW R17 0x0080 ;
LLW R18 0x00FF ;
LLW R20 0x0000 ;
LLW R21 0x0001 ;


# Start by updating addresses
ADD R0 R0 R0 ;
SOBEL_IM1_NPU MULT R8 R6 R14 ;
ADD R0 R0 R0 ;
ADD R8 R8 R7 ; # R8 has current pixel's offset now
ADD R12 R8 R2 ;
SUB R12 R12 R21 ;
ADD R13 R12 R14 ;
SUB R11 R12 R14 ;
ADD R8 R8 R3 ; # Now R8 becomes the output pixel address
# ALL Addresses updated


LOAD R22 R11 0x0000 ;
LOAD R23 R12 0x0000 ;
LOAD R24 R13 0x0000 ;
LOAD R25 R11 0x0001 ;
LOAD R26 R12 0x0001 ;
LOAD R27 R13 0x0001 ;
LOAD R28 R11 0x0002 ;
LOAD R29 R12 0x0002 ;
LOAD R30 R13 0x0002 ;

ADD R0 R0 R0 ;
ADD R0 R0 R0 ;
ADD R0 R0 R0 ;
ADD R0 R0 R0 ;

ENQD0 R22 ;
ENQD0 R23 ;
ENQD0 R24 ;
ENQD0 R25 ;
ENQD0 R26 ;
ENQD0 R27 ;
ENQD0 R28 ;
ENQD0 R29 ;
ENQD0 R30 ;

DEQD0 R16 ;

SUB R0 R16 R17 ;
B LT SOBEL_IM1_NPU_0 ;
ADD R0 R0 R0 ;

STORE R18 R8 0x0000 ;
B UNCOND SOBEL_IM1_NPU_255 ;

ADD R0 R0 R0 ; # This code should never execute
ADD R0 R0 R0 ; # This code should never execute

SOBEL_IM1_NPU_0 ADD R0 R0 R0 ;
STORE R0 R8 0x0000 ;

# Increment iterators and jumps
SOBEL_IM1_NPU_255 ADD R0 R0 R0 ;
ADD R7 R7 R21 ;
SUB R0 R7 R5 ;
B LT SOBEL_IM1_NPU ;

ADD R7 R0 R21 ; # Reset Column iterator to 1
ADD R6 R6 R21 ;

SUB R0 R6 R4 ;
B LT SOBEL_IM1_NPU ;

ADD R0 R0 R0 ;